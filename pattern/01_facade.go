package pattern

/*
	Реализовать паттерн «фасад».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Facade_pattern
*/

/*
	Фасад — структурный паттерн, который добавляет простой интерфейс к сложной системе для взаимодействия с ней.
	
	Паттерн Фасад используется, когда:
		есть сложная система, работу с которой нужно упростить;
		хочется уменьшить количество зависимостей между клиентом и сложной системой;
		требуется разбить сложную систему на компоненты — применение паттерна к каждому компоненту упростит взаимодействие между ними.
	
	Преимущества:
		предоставляет простой интерфейс к сложной системе
		изолирует сложную систему
	
	Недостатки:
		фасад может стать супер-объектом, зависит от большей части системы
		снижается гибкость использования системы (точка входа через фасад)
*/

type Facade struct{}

func (f *Facade) FacadeMethod(subSystemAArgs, subSystemBArgs interface{}) {
	a := &subSystemA{}
	b := &subSystemB{}
	a.MethodA(subSystemAArgs)
	b.MethodB(subSystemAArgs)
}

type subSystemA struct{}

func (s *subSystemA) MethodA(subSystemAArgs interface{}) {

}

type subSystemB struct{}

func (s *subSystemB) MethodB(subSystemAArgs interface{}) {

}
